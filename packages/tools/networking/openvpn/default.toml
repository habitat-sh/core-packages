# ##################################################
# Tunable OpenVPN configuration. Lifted in part from
# https://openvpn.net/index.php/open-source/documentation/howto.html#examples
# ##################################################
# Which local IP address should OpenVPN
# listen on? (optional)

ca = "/hab/svc/openvpn/files/ca.crt"
cert = "/hab/svc/openvpn/files/server.crt"
# Select a cryptographic cipher.
# This config item must be copied to
# the client config file as well.
# Other valid values:
# AES-128-CBC, DES-EDE3-CBC
cipher = "BF-CBC"
client-to-client = false
# Enable compression on the VPN link.
# If you enable it here, you must also
# enable it in the client config file.
comp-lzo = true
# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
dev = "tun"
# Non-Windows systems usually don't need this.
dev-node = false
# Diffie hellman parameters.
# Generate your own with:
#
# openssl dhparam -out dh1024.pem 1024
#
# Substitute 2048 for 1024 if you are using 2048 bit keys.
dh = "/hab/svc/openvpn/files/dh1024.pem"
# Uncomment this directive if multiple clients might connect with the
# same certificate/key files or common names. This is recommended only
# for testing purposes. For production use, each client should have
# its own certificate/key pair.
#
# IF YOU HAVE NOT GENERATED INDIVIDUAL CERTIFICATE/KEY PAIRS FOR EACH
# CLIENT, EACH HAVING ITS OWN UNIQUE "COMMON NAME", UNCOMMENT THIS
# LINE OUT.
duplicate-cn = false
group = "hab"
# Maintain a record of client virtual IP address associations in this
# file. If OpenVPN goes down or is restarted, reconnecting clients can
# be assigned the same virtual IP address from the pool that was
# previously assigned.
ifconfig-pool-persist = "ipp.txt"
# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
keepalive = "10 120"
key = "/hab/svc/openvpn/files/server.key"
# Suppose that you want to enable different firewall access policies
# for different groups of clients. There are two methods:
#
# (1) Run multiple OpenVPN daemons, one for each
# group, and firewall the TUN/TAP interface
# for each group/daemon appropriately.
#
# (2) (Advanced) Create a script to dynamically
# modify the firewall in response to access
# from different clients.  See man
# page for more info on learn-address script.
#
# learn-address = "./script"
learn-address = false
local = "0.0.0.0"
# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
log = false
log-append = "/hab/svc/openvpn/var/log/openvpn.log"
# The maximum number of concurrently connected
# clients we want to allow.
max-clients = 100
# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
mute = 20
# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
persist-key = true
persist-tun = true
# Which TCP/UDP port should OpenVPN listen on? If you want to run
# multiple OpenVPN instances on the same machine, use a different port
# number for each one. You will need to open up this port on your
# firewall.
port = 1194
# TCP or UDP server?
proto = "udp"
# Push routes to the client to allow it to reach other private subnets
# behind the server. Remember that these private subnets will also
# need to know to route the OpenVPN client address pool
# (10.8.0.0/255.255.255.0) back to the OpenVPN server.
#
# Push is an array because there's a variety of options that can be
# specified in the OpenVPN server config. See the OpenVPN
# documentation for more options.
push = ["route 192.168.10.0 255.255.255.0"]
# Configure server mode and supply a VPN subnet for OpenVPN to draw
# client addresses from. The server will take 10.8.0.1 for itself, the
# rest will be made available to clients. Each client will be able to
# reach the server on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
server = "10.8.0.0 255.255.255.0"
# Configure server mode for ethernet bridging. You must first use your
# OS's bridging capability to bridge the TAP interface with the
# ethernet NIC interface. Then you must manually set the IP/netmask on
# the bridge interface, here we assume 10.8.0.4/255.255.255.0. Finally
# we must set aside an IP range in this subnet (start=10.8.0.50
# end=10.8.0.100) to allocate to connecting clients. Leave this line
# commented out unless you are ethernet bridging.
#
# for example:
# server-bridge = "10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100"
server-bridge = false
status = "/hab/svc/openvpn/var/log/openvpn-status.log"
# For extra security beyond that provided
# by SSL/TLS, create an "HMAC firewall"
# to help block DoS attacks and UDP port flooding.
#
# Generate with:
# openvpn --genkey --secret ta.key
#
# The server and each client must have
# a copy of this key.
# The second parameter should be '0'
# on the server and '1' on the clients.
# for example:
# tls-auth = "/hab/svc/openvpn/files/ta.key 0"
tls-auth = false
# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
user = "hab"
# Set the appropriate level of log
# file verbosity.
#
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
verb = 3

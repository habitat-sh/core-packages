#!/bin/bash

exec 2>&1

proto="{{cfg.etcd-http-proto}}"

cd {{pkg.svc_path}}

if [[ "{{cfg.etcd-auto-tls}}" == "true" ]]; then
	export ETCD_AUTO_TLS="true"
	export ETCD_PEER_AUTO_TLS="true"
else
  if [[ "{{cfg.etcd-client-cert-auth}}" == "true" ]]; then
    export ETCD_CLIENT_CERT_AUTH="true"
    export ETCD_CERT_FILE="{{cfg.etcd-cert-file}}"
    export ETCD_KEY_FILE="{{cfg.etcd-key-file}}"
    export ETCD_TRUSTED_CA_FILE="{{cfg.etcd-trusted-ca-file}}"
  fi
  if [[ "{{cfg.etcd-peer-client-cert-auth}}" == "true" ]]; then
    export ETCD_PEER_CLIENT_CERT_AUTH="true"
    export ETCD_PEER_CERT_FILE="{{cfg.etcd-peer-cert-file}}"
    export ETCD_PEER_KEY_FILE="{{cfg.etcd-peer-key-file}}"
    export ETCD_PEER_TRUSTED_CA_FILE="{{cfg.etcd-peer-trusted-ca-file}}"
  fi
fi

listen_ip="{{sys.ip}}"
if [[ -n "{{cfg.etcd-listen-host-ip}}" ]]; then
  listen_ip="{{cfg.etcd-listen-host-ip}}"
fi

nodes="{{#each svc.members as |member| ~}}{{member.sys.hostname}}=${proto}://{{member.sys.ip}}:{{../cfg.etcd-server-end}},{{/each ~}}"
if [[ -n "{{cfg.etcd-initial-cluster}}" ]]; then
  nodes="{{cfg.etcd-initial-cluster}}"
fi

export ETCD_NAME="{{sys.hostname}}"
export ETCD_DATA_DIR="{{pkg.svc_data_path}}"
export ETCD_LISTEN_CLIENT_URLS="${proto}://${listen_ip}:{{cfg.etcd-client-end}}"
export ETCD_LISTEN_PEER_URLS="${proto}://${listen_ip}:{{cfg.etcd-server-end}}"
export ETCD_ADVERTISE_CLIENT_URLS="${proto}://${listen_ip}:{{cfg.etcd-client-end}}"
export ETCD_INITIAL_ADVERTISE_PEER_URLS="${proto}://${listen_ip}:{{cfg.etcd-server-end}}"
export ETCD_INITIAL_CLUSTER_TOKEN="{{cfg.etcd-initial-cluster-token}}"
export ETCD_INITIAL_CLUSTER_STATE="{{cfg.etcd-initial-cluster-state}}"
export ETCD_INITIAL_CLUSTER="$nodes"

if [[ -n "{{cfg.etcd-env-vars-file}}" ]]; then
  source "{{cfg.etcd-env-vars-file}}"
fi

exec etcd

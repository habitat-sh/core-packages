# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# see server.KafkaConfig for additional details and defaults

############################# Server Basics #############################
[server]
# The id of the broker. This must be set to a unique integer for each broker.
#broker_id=0

# Switch to enable topic deletion or not, default value is false
delete_topic_enable=false

############################# Socket Server Settings #############################
[socket]
# The address the socket server listens on. It will get the value returned from
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = security_protocol://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
#listeners=PLAINTEXT://:9092

# Hostname and port the broker will advertise to producers and consumers. If not set,
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
#advertised_listeners=PLAINTEXT://your.host.name:9092

# The number of threads handling network requests
num_network_threads=3

# The number of threads doing disk I/O
num_io_threads=8

# The send buffer (SO_SNDBUF) used by the socket server
socket_send_buffer_bytes=102400

# The receive buffer (SO_RCVBUF) used by the socket server
socket_receive_buffer_bytes=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
socket_request_max_bytes=104857600


############################# Log Basics #############################
[log]
# A comma seperated list of directories under which to store log files
log_dirs="/hab/svc/kafka0/var"

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num_partitions=1

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num_recovery_threads_per_data_dir=1

############################# Log Flush Policy #############################
[log.flush]
# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#interval_messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#interval_ms=1000

############################# Log Retention Policy #############################
[log.retention]
# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion
hours=168

# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
# segments don't drop below log.retention.bytes.
#bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
segment_bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
check_interval_ms=300000

############################# Zookeeper #############################
[zookeeper]
# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
host="localhost"
port=2181
# Timeout in ms for connecting to zookeeper
connection_timeout_ms=6000


############################# Advanced #############################

# Those config are the default from Apache Kafka documentation page
[advanced]
auto_create_topics_enable=true
auto_leader_rebalance_enable=true
background_threads=10
compression_type="producer"
leader_imbalance_check_interval_seconds=300
leader_imbalance_per_broker_percentage=10
log_flush_offset_checkpoint_interval_ms=60000
log_flush_scheduler_interval_ms=9223372036854775807

# Conflicts with log.retention.hours!
#log_retention_minutes=
#log_retention_ms=

log_roll_hours=168
#log_roll_ms=
log_jitter_hours=0
#log_jitter_ms=

log_segment_delete_delay_ms=60000
message_max_bytes=1000012
min_insync_replicas=1
num_replica_fetchers=1
offset_metadata_max_bytes=4096
offsets_commit_required_acks=-1
offsets_commit_timeout_ms=5000
offsets_load_buffer_size=5242880
offsets_retention_check_interval_ms=600000
offsets_retention_minutes=1440
offsets_topic_compression_codec=0
offsets_topic_num_partitions=50
offsets_topic_replication_factor=3
offsets_topic_segment_bytes=104857600
queued_max_requests=500
replica_fetch_min_bytes=1
replica_fetch_wait_max_ms=500

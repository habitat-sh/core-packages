program="gcc"
native_target="${pkg_target%%-*}-unknown-linux-gnu"

pkg_name="gcc-base"
pkg_origin="core"
pkg_version="12.2.0"
pkg_maintainer="The Habitat Maintainers <humans@habitat.sh>"
pkg_description="\
The GNU Compiler Collection (GCC) is a compiler system produced by the GNU \
Project supporting various programming languages. GCC is a key component of \
the GNU toolchain and the standard compiler for most Unix-like operating \
systems.\
"
pkg_upstream_url="https://gcc.gnu.org/"
pkg_license=('GPL-3.0-or-later' 'GCC Runtime Library Exception')
pkg_source="http://ftp.gnu.org/gnu/$program/${program}-${pkg_version}/${program}-${pkg_version}.tar.xz"
pkg_shasum="e549cf9cf3594a00e27b6589d4322d70e0720cdd213f39beb4181e06926230ff"
pkg_dirname="${program}-${pkg_version}"

pkg_deps=(
	core/bash-static
	core/glibc
)

pkg_build_deps=(
	core/linux-headers
	core/binutils-stage1
	core/gcc-stage1
	core/libgmp-stage1
	core/libisl-stage1
	core/libmpfr-stage1
	core/libmpc-stage1
	core/zlib-stage1
	core/zstd-stage1
	core/m4-stage0
	core/flex-stage0
	core/xz-stage0
	core/build-tools-texinfo
	core/build-tools-bison
)

pkg_bin_dirs=(bin)
pkg_include_dirs=(include)
pkg_lib_dirs=(lib lib64)

do_prepare() {
	# We unset all flags that will interfere with the compiler
	unset LD_RUN_PATH

	case $pkg_target in
	aarch64-linux)
		dynamic_linker="$(pkg_path_for glibc)/lib/ld-linux-aarch64.so.1"
		HAB_GCC_STAGE1_GLIBC_DYNAMIC_LINKER="${dynamic_linker}"
		export HAB_GCC_STAGE1_GLIBC_DYNAMIC_LINKER
		build_line "Setting HAB_GCC_STAGE1_GLIBC_DYNAMIC_LINKER=${HAB_GCC_STAGE1_GLIBC_DYNAMIC_LINKER}"
		;;
	x86_64-linux)
		dynamic_linker="$(pkg_path_for glibc)/lib/ld-linux-x86-64.so.2"
		HAB_GCC_STAGE1_GLIBC_DYNAMIC_LINKER="${dynamic_linker}"
		export HAB_GCC_STAGE1_GLIBC_DYNAMIC_LINKER
		build_line "Setting HAB_GCC_STAGE1_GLIBC_DYNAMIC_LINKER=${HAB_GCC_STAGE1_GLIBC_DYNAMIC_LINKER}"
		;;
	esac
	HAB_GCC_STAGE1_GLIBC_PKG_PATH="$(pkg_path_for glibc)"
	export HAB_GCC_STAGE1_GLIBC_PKG_PATH
	build_line "Setting HAB_GCC_STAGE1_GLIBC_PKG_PATH=${HAB_GCC_STAGE1_GLIBC_PKG_PATH}"
	

	# This plan does not require a full bootstrap build of gcc because
	# core/gcc-stage1 is a fully bootstrapped compiler of the same version.
	# Bootstrapping is only recommended when there is a major version difference
	# between the build compiler and the built compiler.
	# To know more about the gcc bootstrap process and it's configuration
	# check out the following link: https://gcc.gnu.org/install/build.html

	# We add extra flags which will get passed to the target xgcc compiler
	# that is used to compile the final libraries such as libatomic, libgomp,
	# libstdc++, libgcc, libquadmath, libssp among other.
	#
	# Explanation of flags used
	# * -B$(pkg_path_for glibc)/lib
	#   Tells gcc where to find C runtime start files (crt{i,o,n}.o) These are
	#   provided by glibc and are required to be linked into all executables.
	# * -L$(pkg_path_for glibc)/lib
	#   Tells gcc where to find the C library, usually libc and libm.
	# * -idirafter $(pkg_path_for glibc)/include
	#   Tells gcc where to find the C library's header files
	# * -idirafter $(pkg_path_for linux-headers)/include
	#   Tells gcc where to find the linux header files.
	#   The C library's header files requires the linux headers.
	#   The linux headers folder must always come after the C library's headers
	#   otherwise they will not get included in the correct order.
	FLAGS_FOR_TARGET="-B$(pkg_path_for glibc)/lib \
		-L$(pkg_path_for glibc)/lib \
		-idirafter $(pkg_path_for glibc)/include \
		-idirafter $(pkg_path_for linux-headers)/include"

	# Extra linking flags passed to gcc so that excutables generated by
	# target xgcc compiler will use the correct dynamic linker from our glibc.
	LDFLAGS_FOR_TARGET="${LDFLAGS} -Wl,-dynamic-linker=${dynamic_linker}"

	# Tell gcc not to look under the default `/lib/` and `/usr/lib/` directories
	# for libraries
	#
	# Thanks to: https://raw.githubusercontent.com/NixOS/nixpkgs/release-22.05/pkgs/development/compilers/gcc/gcc-12-no-sys-dirs.patch
	# shellcheck disable=SC2002
	patch -p1 <"$PLAN_CONTEXT/gcc-12-no-sys-dirs.patch"
}

do_build() {
	mkdir -v build
	pushd build || exit 1

	# We force the usage of the correct linker via the 'LD' parameter.
	# If we do not do this, it will use the linker specified by the compiler.
	# In this case the compiler is the 'core/build-tools-gcc' compiler and it
	# would specify the 'core/build-tools-binutils' ld.
	../configure \
		LDFLAGS_FOR_TARGET="${LDFLAGS_FOR_TARGET}" \
		CPPFLAGS_FOR_TARGET="${CPPFLAGS}" \
		CFLAGS_FOR_TARGET="${CFLAGS}" \
		CXXFLAGS_FOR_TARGET="${CXXFLAGS}" \
		LD="$(pkg_path_for binutils-stage1)"/bin/ld \
		--prefix="$pkg_prefix" \
		--with-gmp="$(pkg_path_for libgmp-stage1)" \
		--with-isl="$(pkg_path_for libisl-stage1)" \
		--with-mpfr="$(pkg_path_for libmpfr-stage1)" \
		--with-mpc="$(pkg_path_for libmpc-stage1)" \
		--with-zstd="$(pkg_path_for zstd-stage1)" \
		--with-native-system-header-dir="$(pkg_path_for glibc)/include" \
		--disable-bootstrap \
		--enable-default-pie \
		--enable-default-ssp \
		--disable-multilib \
		--with-system-zlib \
		--enable-languages=c,c++

	# These flags are passed directly to make as they cannot be
	# configured via the configure script.
	# It is important to not run this build in parallel due to this
	# race condition: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=106162
	make \
		FLAGS_FOR_TARGET="${FLAGS_FOR_TARGET}"
	# -j "$(nproc)" \
	# --output-sync

	popd || exit 1
}

do_install() {
	pushd build || exit 1
	make install

	# Many packages use the name cc to call the C compiler
	ln -sv gcc "$pkg_prefix/bin/cc"

	wrap_binary "${native_target}-c++"
	wrap_binary "${native_target}-g++"
	wrap_binary "${native_target}-gcc"
	wrap_binary "${native_target}-gcc-${pkg_version}"

	wrap_binary "c++"
	wrap_binary "g++"
	wrap_binary "gcc"
	wrap_binary "cpp"

	popd || exit 1
}

wrap_binary() {
	local bin="$pkg_prefix/bin/$1"
	build_line "Adding wrapper $bin to ${bin}.real"
	mv -v "$bin" "${bin}.real"
	case $pkg_target in
	aarch64-linux)
		dynamic_linker="$(pkg_path_for glibc)/lib/ld-linux-aarch64.so.1"
		;;
	x86_64-linux)
		dynamic_linker="$(pkg_path_for glibc)/lib/ld-linux-x86-64.so.2"
		;;
	esac
	sed "$PLAN_CONTEXT/cc-wrapper.sh" \
		-e "s^@bash@^$(pkg_path_for bash-static)/bin/bash^g" \
		-e "s^@glibc@^$(pkg_path_for glibc)^g" \
		-e "s^@linux_headers@^$(pkg_path_for linux-headers)^g" \
		-e "s^@binutils@^$(pkg_path_for binutils-stage1)/bin^g" \
		-e "s^@dynamic_linker@^${dynamic_linker}^g" \
		-e "s^@program@^${bin}.real^g" \
		>"$bin"
	chmod 755 "$bin"
}
